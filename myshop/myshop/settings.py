"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
#we import gettext_lazy as an alias of underscore
from django.utils.translation import gettext_lazy as _
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-iduj=8s)ufje$i+l)ntsn#j4-n3dwb1aa1xm*nrxwal)7&-jeb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'payment.apps.PaymentConfig',
    'coupons.apps.CouponsConfig',
    'rosetta',
    'parler',
    'localflavor',
    'rest_framework',
]

MIDDLEWARE = [
	#Note
	#Middleware is applied for requests in order of appearance in MIDDLEWARE, and in reverse order for responses.
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #We have added this LocaleMiddleware after SessionMiddleware because it needs to use session data.
    #It also has to be placed before CommonMiddleware because the latter needs an active language to resolve
    #the requested URL.
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #custom context processor for cart app will be executed
                #every time a template is rendered using Django's RequestContext.
                #Context processors are executed in all the request that use RequestContext.
                # But you might want to create a custom template tag instead of a context processor if
                #your functionality is not needed in all templates, especially if it involves database queries.
                'cart.context_processors.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

#Create an English and a Swahili version for our shop 
#LANGUAGE_CODE = 'en-us'
#Then use gettext or gettext_lazy to translate your code
LANGUAGE_CODE = 'en'
LANGUAGES = (
	('en', _('English')),
	('es', _('Spanish')),
)

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

#Parler settings
PARLER_LANGUAGES = {
	None: (
		{'code': 'en'},
		{'code': 'es'},
		
	),
	'default': {
		'fallback': 'en',
		'hide_untransalated':False,
	}
}

#The locale directory is where message files for your application will reside.
#And the LOCALE_PATHS setting specifies the directories where Django has to look for translation files.
#Locale paths that appear first have the highest precedence.
LOCALE_PATHS = (
	os.path.join(BASE_DIR, 'locale/'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Since we are using ImageField to store product images, we need the development server to 
# serve the uploaded images

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

#This is the key that we are going to use to store the cart in the user session.
#Since Django sessions are managed per-visitor, we can use the same cart session key for all sessions.
CART_SESSION_ID = 'cart'

#If you don't want to set up email settings, you can tell Django to write emails to
#the console by adding the following setting
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

#SMTP SERVER configuration
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'mohamedlungombe41@gmail.com'
EMAIL_HOST_PASSWORD = 'Mohd03698'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

#Braintree API configuration settings
BRAINTREE_MERCHANT_ID = 'wbs3m7tnkz6gnkp8' #Merchant ID
BRAINTREE_PUBLIC_KEY  = 'thy27mrqbr7336nm'  #Public Key
BRAINTREE_PRIVATE_KEY = 'aac8bcd83446ded244ecce8b646438ae' #Private Key

from braintree import Configuration, Environment

Configuration.configure(
	Environment.Sandbox,
	BRAINTREE_MERCHANT_ID,
	BRAINTREE_PUBLIC_KEY,
	BRAINTREE_PRIVATE_KEY
)

# Sample card number-: 4111111111111111
#CVV -: 123
#Expdate 12/22

#redis-server
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 1
